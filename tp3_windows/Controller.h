/**
 * @fn int controller_loadFromText(char*, LinkedList*)
 * @brief Carga la linked list a partir de un archivo de comas
 *
 * @param char* Direccion del archivo de texto
 * @param LinkedList* pArrayListEmployee Linked List a ser cargada
 * @return int 1 si se ejecuto bien 0 si fallo la carga
 */
int controller_loadFromText(char* path , LinkedList* pArrayListEmployee);

/////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////
/**
 * @fn int controller_loadFromBinary(char*, LinkedList*)
 * @brief Carga la lista a partir de un archivo binario
 *
 * @param path Direccion del archivo de texto
 * @param pArrayListEmployee LinkedList*
 * @return int 1 si se ejecuto bien 0 si fallo la carga
 */
int controller_loadFromBinary(char* path , LinkedList* pArrayListEmployee);

/////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////
/**
 * @fn int controller_addEmployee(LinkedList*, int)
 * @brief Agrega un elemento a la lista con un id pasado por parametro
 *
 * @param pArrayListEmployeem LinkedList* Lista a la que se le agregara un empleado
 * @param id int El ID ya calculados que tendra el nuevo empleado
 * @return int 1 Si se ejecuto bien 0 si fallo la adicion.
 */
int controller_addEmployee(LinkedList* pArrayListEmployeem, int id);

/////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////
/**
 * @fn int controller_editEmployee(LinkedList*)
 * @brief Edita un elemento en la lista pasado por parametro
 *
 * @param pArrayListEmployee LinkedList* Lista a la que se le editara un empleado
 * @return int 1 si se ejecuto bien 0 si fallo la edicion
 */
int controller_editEmployee(LinkedList* pArrayListEmployee);

/////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////
/**
 * @fn int controller_removeEmployee(LinkedList*)
 * @brief Elimina de la LinkedList un elemento pasado por parametro
 *
 * @param pArrayListEmployee LinkedList* Lista a la que se le borrara un empleado
 * @return int 1 si se ejecuto bien 0 si fallo el borrado
 */
int controller_removeEmployee(LinkedList* pArrayListEmployee);

/////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////
/**
 * @fn int controller_ListEmployee(LinkedList*)
 * @brief Lista la LinkedList cargada
 *
 * @param pArrayListEmployee LinkedList* La lista a ser mostrada
 * @return int 1 si se ejecuto bien 0 si fallo el listado
 */
int controller_ListEmployee(LinkedList* pArrayListEmployee);

/////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////
/**
 * @fn int controller_sortEmployee(LinkedList*)
 * @brief Ordena a partir de una funcion la linked list
 *
 * @param pArrayListEmployee LinkedList* La LinkedList a ser ordenada
 * @return int 1 si se ejecuto bien 0 si fallo el ordenamiento
 */
int controller_sortEmployee(LinkedList* pArrayListEmployee);

/////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////
/**
 * @fn int controller_saveAsText(char*, LinkedList*)
 * @brief
 *
 * @param path char* Direccion del archivo de texto
 * @param pArrayListEmployee LinkedList* La lista a ser guardada
 * @return int 1 si se ejecuto bien 0 si fallo el salvado
 */
int controller_saveAsText(char* path , LinkedList* pArrayListEmployee);

/////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////
/**
 * @fn int controller_saveAsBinary(char*, LinkedList*)
 * @brief
 *
 * @param path char* Direccion del archivo de texto
 * @param pArrayListEmployee LinkedList*  La lista a ser guardada
 * @return int 1 si se ejecuto bien 0 si fallo el salvado
 */
int controller_saveAsBinary(char* path , LinkedList* pArrayListEmployee);

/////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////
/**
 * @fn int controller_getNewId(LinkedList*)
 * @brief Un nuevo ID unico e incremental a partir de el id mas grande obtenido
 *
 * @param pArrayListEmployee LinkedList* La lista donde se encuentran los empleados
 * @return int 1 si se ejecuto bien 0 si fallo
 */
int controller_getNewId(LinkedList* pArrayListEmployee);

/////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////
/**
 * @fn int controller_findIndexOfEmployeeById(LinkedList*, int)
 * @brief
 *
 * @param pArrayListEmployee La lista donde se encuentran ekl empleado con ese ID
 * @param int idToFind El id del empleado que estamos buscando
 * @return int -1 si no se encontro al empleado. El indice en la linked list si se ejecuto bien
 */
int controller_findIndexOfEmployeeById(LinkedList* pArrayListEmployee, int idToFind);

/////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////
/**
 * @fn int controller_showMenu()
 * @brief Muestra el menu con las opciones
 *
 * @return int La opcion del menu
 */
int controller_showMenu ();
