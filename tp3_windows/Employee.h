#ifndef employee_H_INCLUDED
#define employee_H_INCLUDED
typedef struct
{
    int id;
    char nombre[128];
    int horasTrabajadas;
    int sueldo;
}Employee;

/**
 * @fn Employee employee_new*()
 * @brief Asigna memoria para un nuevo empleado
 *
 * @return Employee* El puntero al espacio creado para Employee
 */
Employee* employee_new();

/////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////
/**
 * @fn Employee employee_newParametros*(char*, char*, char*, char*)
 * @brief Crea un empleado a partir de los parametros pasados como string
 *
 * @param char* idStr El ID en formato string
 * @param char* nombreStr El nombre del empleado
 * @param char* horasTrabajadasStr Las horas trabajadas en string
 * @param char* sueldoStr El sueldo en string
 * @return Employee* El puntero a la persona creada
 */
Employee* employee_newParametros(char* idStr,char* nombreStr,char* horasTrabajadasStr, char* sueldoStr);

/////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////

/**
 * @fn void showEncabezado()
 * @brief Muestra Encabezado de ID||Nombre||Horas trabajadas||Sueldo
 */
void showEncabezado();

//////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////
/**
 * @fn void employee_delete(Employee*)
 * @brief Elimina un empleado en la linked list
 *
 * @param this Employee* El empleado a ser eliminado
 */
void employee_delete(Employee* this);

/////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////

/**int id,char* nombre,int horasTrabajadas, int sueldo
 * @fn int setNewEmployee(Employee*, int, char*, int, int)
 * @brief Setea los params para un nuevo empleado a partir de los parametros, funcion auxiliar a employee_newParametros
 *
 * @param Employee* El puntero a empleado a ser cargado
 * @param int El ID a ser seteado
 * @param char* El nombre a ser seteado
 * @param int Las horas trabajadas a ser seteadas
 * @param int El sueldo a ser seteado
 * @return int 1 si se seteo con exito 0 si fallo
 */
int setNewEmployee (Employee*,int ,char* ,int , int );

/////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////
/**
 * @fn int employee_setId(Employee*, int)
 * @brief Funcion setter de ID
 *
 * @param Employee* this El empleado al cual se le va a setear el ID
 * @param int id El ID a ser seteado en el empleado
 * @return int 1 si se seteo con exito 0 si fallo
 */
int employee_setId(Employee* this,int id);

/////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////

/**
 * @fn int employee_getId(Employee*, int*)
 * @brief Funcion getter de ID
 *
 * @param Employee* this El empleado del que necesito el ID
 * @param int* id El puntero a la variable que quiero que guarde el id extraido
 * @return int 1 si se seteo con exito 0 si fallo
 */
int employee_getId(Employee* this,int* id);

/////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////

/**
 * @fn int employee_setNombre(Employee*, char*)
 * @brief Funcion setter de nombre
 *
 * @param Employee* this El empleado al cual se le va a setear el nombre
 * @param char* nombre El nombre a ser seteado en el empleado
 * @return int 1 si se seteo con exito 0 si fallo
 */
int employee_setNombre(Employee* this,char* nombre);

/////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////
/**
 * @fn int employee_getNombre(Employee*, char*)
 * @brief Funcion getter de nombre
 *
 * @param this Employee* El empleado del que necesito el nombre
 * @param nombre char* El puntero a la variable que quiero que guarde el nombre extraido
 * @return int 1 si se seteo con exito 0 si fallo
 */
int employee_getNombre(Employee* this,char* nombre);

/////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////
/**
 * @fn int employee_setHorasTrabajadas(Employee*, int)
 * @brief Funcion setter de horas trabajadas
 *
 * @param Employee* this El empleado al cual se le va a setear las hrs trabajadas
 * @param int horasTrabajadas Las hrs trabajadas a ser seteadas en el empleado
 * @return int 1 si se seteo con exito 0 si fallo
 */
int employee_setHorasTrabajadas(Employee* this,int horasTrabajadas);

/////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////
/**
 * @fn int employee_getHorasTrabajadas(Employee*, int*)
 * @brief Funcion getter de hrs trabajadas
 *
 * @param Employee* this El empleado del que necesito las hrs trabajadas
 * @param int* horasTrabajadas El puntero a la variable que quiero que guarde las hrs trabajadas
 * @return int 1 si se seteo con exito 0 si fallo
 */
int employee_getHorasTrabajadas(Employee* this,int* horasTrabajadas);

/////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////
/**
 * @fn int employee_setSueldo(Employee*, int)
 * @brief Funcion setter del sueldo
 *
 * @param Employee* this  El empleado al cual se le va a setear el sueldo
 * @param int* sueldo  El sueldo a ser seteado en el empleado
 * @return int 1 si se seteo con exito 0 si fallo
 */
int employee_setSueldo(Employee* this,int sueldo);

/////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////
/**
 * @fn int employee_getSueldo(Employee*, int*)
 * @brief Funcion getter del sueldo
 *
 * @param Employee* El empleado del que necesito el sueldo
 * @param int* El puntero a la variable que quiero que guarde el sueldo
 * @return int 1 si se seteo con exito 0 si fallo
 */
int employee_getSueldo(Employee* this,int* sueldo);

/////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////
/**
 * @fn int employee_showEmpleado(Employee*)
 * @brief Funcion que muestra un empleado con printf
 *
 * @param Employee* El empleado que quiero mostrado
 * @return int 1 si se seteo con exito 0 si fallo
 */
int employee_showEmpleado(Employee* this);

/////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////
/**
 * @fn int compareById(void*, void*)
 * @brief Funcion que compara dos empleados a partir de sus ID
 *
 * @param void* Un puntero a un empleado uno
 * @param void* Un puntero a otro empleado dos
 * @return int 1 si el empleado uno tiene mayor sueldo que el empleado dos, -1 si el empleado uno tiene menor sueldo que empleado dos
 */
int compareById (void* , void*);

int compareByNombre (void* uno, void* dos);

#endif // employee_H_INCLUDED
