void clearStdin(void);


void getString(char [],char []);


int getStringNumeros(char [],char []);


int getValidInt(char [],char [], int* ,int , int ,int );

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/** \brief Funcion generica que pide datos mediante un scanf seguro cortando saltos de enter
 *
 * \param recibe el puntero a la variable a la que va a acceder y completar
 * \param el largo de esta variable para que no desborde
 * \return retorna 0 si se ejecuto bien -1 si la operacion fallo
 *
 */
int myGets (char * , int );

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/** \brief Funcion que permite guardar en el puntero int un numero entero validado, por maximos y minimos
 *
 * \param int* el puntero a la variable que se va a llenar
 * \param char* el mensaje que debe mostrar antes de pedir el dato
 * \param char* el mensaje de error que debe mostrar despues de entrar el dato mal
 * \param int el numero minimo permitido
 * \param int el numero maximo permitido
 * \param int la cantidad de reintentos que se le da al usario para que ingrese
 * \return int retorna 0 si se ejecuto bien -1 si la operacion fallo
 *
 */
int getNumero(int* , char* , char* , int , int , int );

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/** \brief Funcion que permite guardar en el puntero float un numero flotante validado, por maximos y minimos
 *
 * \param float* el puntero a la variable que se va a llenar
 * \param char* el mensaje que debe mostrar antes de pedir el dato
 * \param char* el mensaje de error que debe mostrar despues de entrar el dato mal
 * \param int el numero minimo permitido
 * \param int el numero maximo permitido
 * \param int la cantidad de reintentos que se le da al usario para que ingrese
 * \return int retorna 0 si se ejecuto bien -1 si la operacion fallo
 *
 */
int getNumeroFlotante(float*, char*, char*, int, int, int);

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/** \brief Funcion para obtener un numero entero. Mediante el myGets consigue un string. Mediante esNumerica comprueba que solo son numeros, mediate atoi nos asigna al parametro puntero el buffer
 *
 * \param int* el puntero a la variable que se va a llenar
 * \return int retorna 0 si se ejecuto bien -1 si la operacion fallo
 *
 */
int getInt(int* );
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/** \brief Funcion para obtener un numero flotante. Mediante el myGets consigue un string. Mediante esFlotante comprueba que solo son numeros y una sola coma, mediate atof modifica el parametro como puntero
 *
 * \param float* el puntero a la variable que se va a llenar
 * \return int retorna 0 si se ejecuto bien -1 si la operacion fallo
 *
 */

int getFloat(float* );

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


/** \brief Funcion que recorre un string para validar que todos los caracteres son numeros o en el caso de ser el primer caracter admite + o -.  Usar esto antes de mandar a atoi
 *
 * \param un puntero al char a ser validado.
 * \param el largo del char
 * \return 0 cuando la validacion falla, es decir cuando se encontro algo que no era un numero. 1 cuando chequea que todo esta bien
 *
 */
int esNumerica (char*, int);


////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/** \brief Funcion que recorre un string para validar que todos los caracteres son numeros o en el caso de ser el primer caracter admite + o -, admite un solo punto.  Usar esto antes de mandar a atof
 *
 * \param un puntero al char a ser validado.
 * \param el largo del char
 * \return 0 cuando la validacion falla, es decir cuando se encontro algo que no era un numero. 1 cuando chequea que todo esta bien
 *
 */
int esFlotante (char*, int );


/** \brief Funcion que traba la ejecucion y pide un dato de confirmacion que el usuario debe ingresar para segur ejecutando el programa
 *
 * \param int El valor que debe ser ingresado para que la ejecucion siga
 * \return int 0 si se cancelo la accion, 1 si se paso la confirmacion
 *
 */
int confirmEdit(int );

/** \brief verifica que el char de sexo sea F o M
 *
 * \param  char* mensaje que pide al usuario
 * \param  char* mensaje de error
 * \return char el char verificado
 *
 */
char getChar(char *,char *);

/**
 * \brief Verifica si el valor recibido contiene solo letras
 * \param str Array con la cadena a ser analizada
 * \return 1 si contiene solo ' ' y letras y 0 si no lo es
 *
 */

int esSoloLetras(char str[]);






