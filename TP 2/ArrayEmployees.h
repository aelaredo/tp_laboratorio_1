

typedef struct
    {
    int id;
    char name[51];
    char lastName[51];
    float salary;
    int sector;
    int isEmpty;


    }Employee;
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


/** \brief Formatea los espacios vacios del arreglo, pasa el flag isEmpty a verdadero
 *
 * \param Employee []
 * \param int Largo del array
 * \return 0 si se formatio bien, -1 si fallo la operacion
 *
 */

int initEmployees(Employee[], int);

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/** \brief Recibe un array con estructura Employee y devuelve el primer lugar vacio que encuentro
 *
 * \param  Employee []
 * \param int Largo del array
 * \return int el primer indice vacio que encontro, -1 si no encuentra espacio vacio
 *
 */
int emptyIndex (Employee [], int);


///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


/** \brief  Devuelve los lugares libres disoponibles en el array
 *
 * \param [] Employee array a ser analizado
 * \param int largo del array a ser analizado
 * \return int [si (return == 0) => array esta lleno] || [si return  ==  largo del array] => array esta vacio. Devuelve -1 si hubo en error en los parametros
 *
 */
int arrayEstado(Employee [], int);

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


/** \brief Devuelve una estructura Employee cargada con datos conseguidos en scanf
 *
 * \return Employee con lo datos ingresados por el usuario
 *
 */
Employee addOneEmployee();

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


/** \brief regresa la posicion en el array de un determinado id
 *
 * \param [] ArregloEmpleados
 * \param int Largo del array
 * \param int El id que se debe buscar
 * \return int la posicion en la que se encontro el ID
 *
 */
int findEmployeeById(Employee [], int, int );

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/** \brief recibe el array a ser modificado, el ID a ser modificado, y la opcion de lo que se debe editar.
 *
 * \param Employee []
 * \param int Largo del array
 * \param int ID a modificar
 * \param int 1 para editar nombre, y pedirle el nombre para pasar como param 2 para editar apellido idem 1, 3 para editar salario idem 1 , 4 para editar sector idem 1.
 * \return int 0 si ejecuto bien, -1 si hubo un error
 *
 */
int editEmployee(Employee [], int, int , int);

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


/** \brief Funcion que traba la ejecucion del programa para que el usuario confirme mediante un scanf una accion.
 *
 * \param int dato que usuario debe tipear para confirmar la edicion
 * \return int devuelve si 1 si la confirmacion es correcta permitiendo que siga con la ejecucion del programa 0 si se cancela la confirmacion
 *
 */
int confirmEdit(int);

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/** \brief Elimina de manera logica un empleado recibiendo su ID
 *
 * \param Employee []
 * \param int Largo del array
 * \param int El id que se debe borrar logicamente, esto es pasar el valor .isEmpty de 0 falso a 1 verdadero.
 * \return int 0 si ejecuto bien, -1 si hubo un error
 */
int removeEmployee (Employee [], int, int);

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


/** \brief recibe un entero y le suma uno para generar ID consecutivos y unicos
 *
 * \param int un entero
 * \return int el mismo entero mas uno
 *
 */
int getNewID (int );


////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/** \brief Recibe un array de tipo employee y imprime sus campos
 *
 * \param Employee [] Un array de tipo employee
 * \param int el largo del array
 * \return int 0 si ejecuto bien, -1 si hubo un error
 *
 */
int printEmployees (Employee [] ,int );

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


/** \brief recibe un array de Employee e informa el total de los salarios, el promedio de los salarios y cuandots empleados cobran por encima del promedios
 *
 * \param Employee []  de employee
 * \param int el largo del array
 * \return int 0 si ejecuto bien, -1 si hubo un error
 *
 */
int infoSalary (Employee  [], int ) ;

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/** \brief recibe un array de Employee y ordena alfabeticamente por apellido de la A-Z y en caso de igualdad de sector mayor a menor
 *
 * \param Employee [] array de employee
 * \param int el largo del array
 * \return int 0 si ejecuto bien, -1 si hubo un error
 *
 */
int sortEmployees (Employee [], int );
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/** \brief Recibe una variable de tipo Employee y muestra todos sus datos
 *
 * \param Employee una variable de tipo EMployee
 * \return
 *
 */
void printOneEmployee (Employee);

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/** \brief Recibe un puntero a string y modifica la primer letra pasandola a uppercase
 *
 * \param char* un puntero a array de caracteres (string)
 * \return int 0 si ejecuto bien, -1 si hubo un error
 *
 */
int PrimeraLetraUpper  (char* );

